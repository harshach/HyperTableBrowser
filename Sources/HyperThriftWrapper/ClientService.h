/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ClientService_H
#define ClientService_H

#include <TProcessor.h>
#include "Client_types.h"

namespace Hypertable { namespace ThriftGen {

class ClientServiceIf {
 public:
  virtual ~ClientServiceIf() {}
  virtual void create_table(const std::string& name, const std::string& schema) = 0;
  virtual Scanner open_scanner(const std::string& name, const ScanSpec& scan_spec, const bool retry_table_not_found) = 0;
  virtual void close_scanner(const Scanner scanner) = 0;
  virtual void next_cells(std::vector<Cell> & _return, const Scanner scanner) = 0;
  virtual void next_cells_as_arrays(std::vector<CellAsArray> & _return, const Scanner scanner) = 0;
  virtual void next_row(std::vector<Cell> & _return, const Scanner scanner) = 0;
  virtual void next_row_as_arrays(std::vector<CellAsArray> & _return, const Scanner scanner) = 0;
  virtual void get_row(std::vector<Cell> & _return, const std::string& name, const std::string& row) = 0;
  virtual void get_row_as_arrays(std::vector<CellAsArray> & _return, const std::string& name, const std::string& row) = 0;
  virtual void get_cell(Value& _return, const std::string& name, const std::string& row, const std::string& column) = 0;
  virtual void get_cells(std::vector<Cell> & _return, const std::string& name, const ScanSpec& scan_spec) = 0;
  virtual void get_cells_as_arrays(std::vector<CellAsArray> & _return, const std::string& name, const ScanSpec& scan_spec) = 0;
  virtual void put_cells(const std::string& tablename, const MutateSpec& mutate_spec, const std::vector<Cell> & cells) = 0;
  virtual void put_cells_as_arrays(const std::string& tablename, const MutateSpec& mutate_spec, const std::vector<CellAsArray> & cells) = 0;
  virtual void put_cell(const std::string& tablename, const MutateSpec& mutate_spec, const Cell& cell) = 0;
  virtual void put_cell_as_array(const std::string& tablename, const MutateSpec& mutate_spec, const CellAsArray& cell) = 0;
  virtual Mutator open_mutator(const std::string& name, const int32_t flags, const int32_t flush_interval) = 0;
  virtual void close_mutator(const Mutator mutator, const bool flush) = 0;
  virtual void set_cell(const Mutator mutator, const Cell& cell) = 0;
  virtual void set_cell_as_array(const Mutator mutator, const CellAsArray& cell) = 0;
  virtual void set_cells(const Mutator mutator, const std::vector<Cell> & cells) = 0;
  virtual void set_cells_as_arrays(const Mutator mutator, const std::vector<CellAsArray> & cells) = 0;
  virtual void flush_mutator(const Mutator mutator) = 0;
  virtual int32_t get_table_id(const std::string& name) = 0;
  virtual void get_schema(std::string& _return, const std::string& name) = 0;
  virtual void get_tables(std::vector<std::string> & _return) = 0;
  virtual void drop_table(const std::string& name, const bool if_exists) = 0;
};

class ClientServiceNull : virtual public ClientServiceIf {
 public:
  virtual ~ClientServiceNull() {}
  void create_table(const std::string& /* name */, const std::string& /* schema */) {
    return;
  }
  Scanner open_scanner(const std::string& /* name */, const ScanSpec& /* scan_spec */, const bool /* retry_table_not_found */) {
    Scanner _return = 0;
    return _return;
  }
  void close_scanner(const Scanner /* scanner */) {
    return;
  }
  void next_cells(std::vector<Cell> & /* _return */, const Scanner /* scanner */) {
    return;
  }
  void next_cells_as_arrays(std::vector<CellAsArray> & /* _return */, const Scanner /* scanner */) {
    return;
  }
  void next_row(std::vector<Cell> & /* _return */, const Scanner /* scanner */) {
    return;
  }
  void next_row_as_arrays(std::vector<CellAsArray> & /* _return */, const Scanner /* scanner */) {
    return;
  }
  void get_row(std::vector<Cell> & /* _return */, const std::string& /* name */, const std::string& /* row */) {
    return;
  }
  void get_row_as_arrays(std::vector<CellAsArray> & /* _return */, const std::string& /* name */, const std::string& /* row */) {
    return;
  }
  void get_cell(Value& /* _return */, const std::string& /* name */, const std::string& /* row */, const std::string& /* column */) {
    return;
  }
  void get_cells(std::vector<Cell> & /* _return */, const std::string& /* name */, const ScanSpec& /* scan_spec */) {
    return;
  }
  void get_cells_as_arrays(std::vector<CellAsArray> & /* _return */, const std::string& /* name */, const ScanSpec& /* scan_spec */) {
    return;
  }
  void put_cells(const std::string& /* tablename */, const MutateSpec& /* mutate_spec */, const std::vector<Cell> & /* cells */) {
    return;
  }
  void put_cells_as_arrays(const std::string& /* tablename */, const MutateSpec& /* mutate_spec */, const std::vector<CellAsArray> & /* cells */) {
    return;
  }
  void put_cell(const std::string& /* tablename */, const MutateSpec& /* mutate_spec */, const Cell& /* cell */) {
    return;
  }
  void put_cell_as_array(const std::string& /* tablename */, const MutateSpec& /* mutate_spec */, const CellAsArray& /* cell */) {
    return;
  }
  Mutator open_mutator(const std::string& /* name */, const int32_t /* flags */, const int32_t /* flush_interval */) {
    Mutator _return = 0;
    return _return;
  }
  void close_mutator(const Mutator /* mutator */, const bool /* flush */) {
    return;
  }
  void set_cell(const Mutator /* mutator */, const Cell& /* cell */) {
    return;
  }
  void set_cell_as_array(const Mutator /* mutator */, const CellAsArray& /* cell */) {
    return;
  }
  void set_cells(const Mutator /* mutator */, const std::vector<Cell> & /* cells */) {
    return;
  }
  void set_cells_as_arrays(const Mutator /* mutator */, const std::vector<CellAsArray> & /* cells */) {
    return;
  }
  void flush_mutator(const Mutator /* mutator */) {
    return;
  }
  int32_t get_table_id(const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
  void get_schema(std::string& /* _return */, const std::string& /* name */) {
    return;
  }
  void get_tables(std::vector<std::string> & /* _return */) {
    return;
  }
  void drop_table(const std::string& /* name */, const bool /* if_exists */) {
    return;
  }
};

class ClientService_create_table_args {
 public:

  ClientService_create_table_args() : name(""), schema("") {
  }

  virtual ~ClientService_create_table_args() throw() {}

  std::string name;
  std::string schema;

  struct __isset {
    __isset() : name(false), schema(false) {}
    bool name;
    bool schema;
  } __isset;

  bool operator == (const ClientService_create_table_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(schema == rhs.schema))
      return false;
    return true;
  }
  bool operator != (const ClientService_create_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_create_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_create_table_pargs {
 public:


  virtual ~ClientService_create_table_pargs() throw() {}

  const std::string* name;
  const std::string* schema;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_create_table_result {
 public:

  ClientService_create_table_result() {
  }

  virtual ~ClientService_create_table_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_create_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_create_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_create_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_create_table_presult {
 public:


  virtual ~ClientService_create_table_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_open_scanner_args {
 public:

  ClientService_open_scanner_args() : name(""), retry_table_not_found(false) {
  }

  virtual ~ClientService_open_scanner_args() throw() {}

  std::string name;
  ScanSpec scan_spec;
  bool retry_table_not_found;

  struct __isset {
    __isset() : name(false), scan_spec(false), retry_table_not_found(false) {}
    bool name;
    bool scan_spec;
    bool retry_table_not_found;
  } __isset;

  bool operator == (const ClientService_open_scanner_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(scan_spec == rhs.scan_spec))
      return false;
    if (!(retry_table_not_found == rhs.retry_table_not_found))
      return false;
    return true;
  }
  bool operator != (const ClientService_open_scanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_open_scanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_open_scanner_pargs {
 public:


  virtual ~ClientService_open_scanner_pargs() throw() {}

  const std::string* name;
  const ScanSpec* scan_spec;
  const bool* retry_table_not_found;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_open_scanner_result {
 public:

  ClientService_open_scanner_result() : success(0) {
  }

  virtual ~ClientService_open_scanner_result() throw() {}

  Scanner success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_open_scanner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_open_scanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_open_scanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_open_scanner_presult {
 public:


  virtual ~ClientService_open_scanner_presult() throw() {}

  Scanner* success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_close_scanner_args {
 public:

  ClientService_close_scanner_args() : scanner(0) {
  }

  virtual ~ClientService_close_scanner_args() throw() {}

  Scanner scanner;

  struct __isset {
    __isset() : scanner(false) {}
    bool scanner;
  } __isset;

  bool operator == (const ClientService_close_scanner_args & rhs) const
  {
    if (!(scanner == rhs.scanner))
      return false;
    return true;
  }
  bool operator != (const ClientService_close_scanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_close_scanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_close_scanner_pargs {
 public:


  virtual ~ClientService_close_scanner_pargs() throw() {}

  const Scanner* scanner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_close_scanner_result {
 public:

  ClientService_close_scanner_result() {
  }

  virtual ~ClientService_close_scanner_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_close_scanner_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_close_scanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_close_scanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_close_scanner_presult {
 public:


  virtual ~ClientService_close_scanner_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_next_cells_args {
 public:

  ClientService_next_cells_args() : scanner(0) {
  }

  virtual ~ClientService_next_cells_args() throw() {}

  Scanner scanner;

  struct __isset {
    __isset() : scanner(false) {}
    bool scanner;
  } __isset;

  bool operator == (const ClientService_next_cells_args & rhs) const
  {
    if (!(scanner == rhs.scanner))
      return false;
    return true;
  }
  bool operator != (const ClientService_next_cells_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_next_cells_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_cells_pargs {
 public:


  virtual ~ClientService_next_cells_pargs() throw() {}

  const Scanner* scanner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_cells_result {
 public:

  ClientService_next_cells_result() {
  }

  virtual ~ClientService_next_cells_result() throw() {}

  std::vector<Cell>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_next_cells_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_next_cells_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_next_cells_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_cells_presult {
 public:


  virtual ~ClientService_next_cells_presult() throw() {}

  std::vector<Cell> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_next_cells_as_arrays_args {
 public:

  ClientService_next_cells_as_arrays_args() : scanner(0) {
  }

  virtual ~ClientService_next_cells_as_arrays_args() throw() {}

  Scanner scanner;

  struct __isset {
    __isset() : scanner(false) {}
    bool scanner;
  } __isset;

  bool operator == (const ClientService_next_cells_as_arrays_args & rhs) const
  {
    if (!(scanner == rhs.scanner))
      return false;
    return true;
  }
  bool operator != (const ClientService_next_cells_as_arrays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_next_cells_as_arrays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_cells_as_arrays_pargs {
 public:


  virtual ~ClientService_next_cells_as_arrays_pargs() throw() {}

  const Scanner* scanner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_cells_as_arrays_result {
 public:

  ClientService_next_cells_as_arrays_result() {
  }

  virtual ~ClientService_next_cells_as_arrays_result() throw() {}

  std::vector<CellAsArray>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_next_cells_as_arrays_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_next_cells_as_arrays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_next_cells_as_arrays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_cells_as_arrays_presult {
 public:


  virtual ~ClientService_next_cells_as_arrays_presult() throw() {}

  std::vector<CellAsArray> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_next_row_args {
 public:

  ClientService_next_row_args() : scanner(0) {
  }

  virtual ~ClientService_next_row_args() throw() {}

  Scanner scanner;

  struct __isset {
    __isset() : scanner(false) {}
    bool scanner;
  } __isset;

  bool operator == (const ClientService_next_row_args & rhs) const
  {
    if (!(scanner == rhs.scanner))
      return false;
    return true;
  }
  bool operator != (const ClientService_next_row_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_next_row_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_row_pargs {
 public:


  virtual ~ClientService_next_row_pargs() throw() {}

  const Scanner* scanner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_row_result {
 public:

  ClientService_next_row_result() {
  }

  virtual ~ClientService_next_row_result() throw() {}

  std::vector<Cell>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_next_row_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_next_row_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_next_row_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_row_presult {
 public:


  virtual ~ClientService_next_row_presult() throw() {}

  std::vector<Cell> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_next_row_as_arrays_args {
 public:

  ClientService_next_row_as_arrays_args() : scanner(0) {
  }

  virtual ~ClientService_next_row_as_arrays_args() throw() {}

  Scanner scanner;

  struct __isset {
    __isset() : scanner(false) {}
    bool scanner;
  } __isset;

  bool operator == (const ClientService_next_row_as_arrays_args & rhs) const
  {
    if (!(scanner == rhs.scanner))
      return false;
    return true;
  }
  bool operator != (const ClientService_next_row_as_arrays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_next_row_as_arrays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_row_as_arrays_pargs {
 public:


  virtual ~ClientService_next_row_as_arrays_pargs() throw() {}

  const Scanner* scanner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_row_as_arrays_result {
 public:

  ClientService_next_row_as_arrays_result() {
  }

  virtual ~ClientService_next_row_as_arrays_result() throw() {}

  std::vector<CellAsArray>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_next_row_as_arrays_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_next_row_as_arrays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_next_row_as_arrays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_next_row_as_arrays_presult {
 public:


  virtual ~ClientService_next_row_as_arrays_presult() throw() {}

  std::vector<CellAsArray> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_get_row_args {
 public:

  ClientService_get_row_args() : name(""), row("") {
  }

  virtual ~ClientService_get_row_args() throw() {}

  std::string name;
  std::string row;

  struct __isset {
    __isset() : name(false), row(false) {}
    bool name;
    bool row;
  } __isset;

  bool operator == (const ClientService_get_row_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(row == rhs.row))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_row_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_row_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_row_pargs {
 public:


  virtual ~ClientService_get_row_pargs() throw() {}

  const std::string* name;
  const std::string* row;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_row_result {
 public:

  ClientService_get_row_result() {
  }

  virtual ~ClientService_get_row_result() throw() {}

  std::vector<Cell>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_get_row_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_row_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_row_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_row_presult {
 public:


  virtual ~ClientService_get_row_presult() throw() {}

  std::vector<Cell> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_get_row_as_arrays_args {
 public:

  ClientService_get_row_as_arrays_args() : name(""), row("") {
  }

  virtual ~ClientService_get_row_as_arrays_args() throw() {}

  std::string name;
  std::string row;

  struct __isset {
    __isset() : name(false), row(false) {}
    bool name;
    bool row;
  } __isset;

  bool operator == (const ClientService_get_row_as_arrays_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(row == rhs.row))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_row_as_arrays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_row_as_arrays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_row_as_arrays_pargs {
 public:


  virtual ~ClientService_get_row_as_arrays_pargs() throw() {}

  const std::string* name;
  const std::string* row;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_row_as_arrays_result {
 public:

  ClientService_get_row_as_arrays_result() {
  }

  virtual ~ClientService_get_row_as_arrays_result() throw() {}

  std::vector<CellAsArray>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_get_row_as_arrays_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_row_as_arrays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_row_as_arrays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_row_as_arrays_presult {
 public:


  virtual ~ClientService_get_row_as_arrays_presult() throw() {}

  std::vector<CellAsArray> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_get_cell_args {
 public:

  ClientService_get_cell_args() : name(""), row(""), column("") {
  }

  virtual ~ClientService_get_cell_args() throw() {}

  std::string name;
  std::string row;
  std::string column;

  struct __isset {
    __isset() : name(false), row(false), column(false) {}
    bool name;
    bool row;
    bool column;
  } __isset;

  bool operator == (const ClientService_get_cell_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(column == rhs.column))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_cell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_cell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cell_pargs {
 public:


  virtual ~ClientService_get_cell_pargs() throw() {}

  const std::string* name;
  const std::string* row;
  const std::string* column;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cell_result {
 public:

  ClientService_get_cell_result() : success("") {
  }

  virtual ~ClientService_get_cell_result() throw() {}

  Value success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_get_cell_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_cell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_cell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cell_presult {
 public:


  virtual ~ClientService_get_cell_presult() throw() {}

  Value* success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_get_cells_args {
 public:

  ClientService_get_cells_args() : name("") {
  }

  virtual ~ClientService_get_cells_args() throw() {}

  std::string name;
  ScanSpec scan_spec;

  struct __isset {
    __isset() : name(false), scan_spec(false) {}
    bool name;
    bool scan_spec;
  } __isset;

  bool operator == (const ClientService_get_cells_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(scan_spec == rhs.scan_spec))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_cells_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_cells_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cells_pargs {
 public:


  virtual ~ClientService_get_cells_pargs() throw() {}

  const std::string* name;
  const ScanSpec* scan_spec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cells_result {
 public:

  ClientService_get_cells_result() {
  }

  virtual ~ClientService_get_cells_result() throw() {}

  std::vector<Cell>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_get_cells_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_cells_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_cells_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cells_presult {
 public:


  virtual ~ClientService_get_cells_presult() throw() {}

  std::vector<Cell> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_get_cells_as_arrays_args {
 public:

  ClientService_get_cells_as_arrays_args() : name("") {
  }

  virtual ~ClientService_get_cells_as_arrays_args() throw() {}

  std::string name;
  ScanSpec scan_spec;

  struct __isset {
    __isset() : name(false), scan_spec(false) {}
    bool name;
    bool scan_spec;
  } __isset;

  bool operator == (const ClientService_get_cells_as_arrays_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(scan_spec == rhs.scan_spec))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_cells_as_arrays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_cells_as_arrays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cells_as_arrays_pargs {
 public:


  virtual ~ClientService_get_cells_as_arrays_pargs() throw() {}

  const std::string* name;
  const ScanSpec* scan_spec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cells_as_arrays_result {
 public:

  ClientService_get_cells_as_arrays_result() {
  }

  virtual ~ClientService_get_cells_as_arrays_result() throw() {}

  std::vector<CellAsArray>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_get_cells_as_arrays_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_cells_as_arrays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_cells_as_arrays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_cells_as_arrays_presult {
 public:


  virtual ~ClientService_get_cells_as_arrays_presult() throw() {}

  std::vector<CellAsArray> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_put_cells_args {
 public:

  ClientService_put_cells_args() : tablename("") {
  }

  virtual ~ClientService_put_cells_args() throw() {}

  std::string tablename;
  MutateSpec mutate_spec;
  std::vector<Cell>  cells;

  struct __isset {
    __isset() : tablename(false), mutate_spec(false), cells(false) {}
    bool tablename;
    bool mutate_spec;
    bool cells;
  } __isset;

  bool operator == (const ClientService_put_cells_args & rhs) const
  {
    if (!(tablename == rhs.tablename))
      return false;
    if (!(mutate_spec == rhs.mutate_spec))
      return false;
    if (!(cells == rhs.cells))
      return false;
    return true;
  }
  bool operator != (const ClientService_put_cells_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_put_cells_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cells_pargs {
 public:


  virtual ~ClientService_put_cells_pargs() throw() {}

  const std::string* tablename;
  const MutateSpec* mutate_spec;
  const std::vector<Cell> * cells;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cells_result {
 public:

  ClientService_put_cells_result() {
  }

  virtual ~ClientService_put_cells_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_put_cells_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_put_cells_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_put_cells_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cells_presult {
 public:


  virtual ~ClientService_put_cells_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_put_cells_as_arrays_args {
 public:

  ClientService_put_cells_as_arrays_args() : tablename("") {
  }

  virtual ~ClientService_put_cells_as_arrays_args() throw() {}

  std::string tablename;
  MutateSpec mutate_spec;
  std::vector<CellAsArray>  cells;

  struct __isset {
    __isset() : tablename(false), mutate_spec(false), cells(false) {}
    bool tablename;
    bool mutate_spec;
    bool cells;
  } __isset;

  bool operator == (const ClientService_put_cells_as_arrays_args & rhs) const
  {
    if (!(tablename == rhs.tablename))
      return false;
    if (!(mutate_spec == rhs.mutate_spec))
      return false;
    if (!(cells == rhs.cells))
      return false;
    return true;
  }
  bool operator != (const ClientService_put_cells_as_arrays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_put_cells_as_arrays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cells_as_arrays_pargs {
 public:


  virtual ~ClientService_put_cells_as_arrays_pargs() throw() {}

  const std::string* tablename;
  const MutateSpec* mutate_spec;
  const std::vector<CellAsArray> * cells;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cells_as_arrays_result {
 public:

  ClientService_put_cells_as_arrays_result() {
  }

  virtual ~ClientService_put_cells_as_arrays_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_put_cells_as_arrays_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_put_cells_as_arrays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_put_cells_as_arrays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cells_as_arrays_presult {
 public:


  virtual ~ClientService_put_cells_as_arrays_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_put_cell_args {
 public:

  ClientService_put_cell_args() : tablename("") {
  }

  virtual ~ClientService_put_cell_args() throw() {}

  std::string tablename;
  MutateSpec mutate_spec;
  Cell cell;

  struct __isset {
    __isset() : tablename(false), mutate_spec(false), cell(false) {}
    bool tablename;
    bool mutate_spec;
    bool cell;
  } __isset;

  bool operator == (const ClientService_put_cell_args & rhs) const
  {
    if (!(tablename == rhs.tablename))
      return false;
    if (!(mutate_spec == rhs.mutate_spec))
      return false;
    if (!(cell == rhs.cell))
      return false;
    return true;
  }
  bool operator != (const ClientService_put_cell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_put_cell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cell_pargs {
 public:


  virtual ~ClientService_put_cell_pargs() throw() {}

  const std::string* tablename;
  const MutateSpec* mutate_spec;
  const Cell* cell;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cell_result {
 public:

  ClientService_put_cell_result() {
  }

  virtual ~ClientService_put_cell_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_put_cell_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_put_cell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_put_cell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cell_presult {
 public:


  virtual ~ClientService_put_cell_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_put_cell_as_array_args {
 public:

  ClientService_put_cell_as_array_args() : tablename("") {
  }

  virtual ~ClientService_put_cell_as_array_args() throw() {}

  std::string tablename;
  MutateSpec mutate_spec;
  CellAsArray cell;

  struct __isset {
    __isset() : tablename(false), mutate_spec(false), cell(false) {}
    bool tablename;
    bool mutate_spec;
    bool cell;
  } __isset;

  bool operator == (const ClientService_put_cell_as_array_args & rhs) const
  {
    if (!(tablename == rhs.tablename))
      return false;
    if (!(mutate_spec == rhs.mutate_spec))
      return false;
    if (!(cell == rhs.cell))
      return false;
    return true;
  }
  bool operator != (const ClientService_put_cell_as_array_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_put_cell_as_array_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cell_as_array_pargs {
 public:


  virtual ~ClientService_put_cell_as_array_pargs() throw() {}

  const std::string* tablename;
  const MutateSpec* mutate_spec;
  const CellAsArray* cell;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cell_as_array_result {
 public:

  ClientService_put_cell_as_array_result() {
  }

  virtual ~ClientService_put_cell_as_array_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_put_cell_as_array_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_put_cell_as_array_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_put_cell_as_array_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_put_cell_as_array_presult {
 public:


  virtual ~ClientService_put_cell_as_array_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_open_mutator_args {
 public:

  ClientService_open_mutator_args() : name(""), flags(0), flush_interval(0) {
  }

  virtual ~ClientService_open_mutator_args() throw() {}

  std::string name;
  int32_t flags;
  int32_t flush_interval;

  struct __isset {
    __isset() : name(false), flags(false), flush_interval(false) {}
    bool name;
    bool flags;
    bool flush_interval;
  } __isset;

  bool operator == (const ClientService_open_mutator_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(flush_interval == rhs.flush_interval))
      return false;
    return true;
  }
  bool operator != (const ClientService_open_mutator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_open_mutator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_open_mutator_pargs {
 public:


  virtual ~ClientService_open_mutator_pargs() throw() {}

  const std::string* name;
  const int32_t* flags;
  const int32_t* flush_interval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_open_mutator_result {
 public:

  ClientService_open_mutator_result() : success(0) {
  }

  virtual ~ClientService_open_mutator_result() throw() {}

  Mutator success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_open_mutator_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_open_mutator_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_open_mutator_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_open_mutator_presult {
 public:


  virtual ~ClientService_open_mutator_presult() throw() {}

  Mutator* success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_close_mutator_args {
 public:

  ClientService_close_mutator_args() : mutator(0), flush(true) {
  }

  virtual ~ClientService_close_mutator_args() throw() {}

  Mutator mutator;
  bool flush;

  struct __isset {
    __isset() : mutator(false), flush(false) {}
    bool mutator;
    bool flush;
  } __isset;

  bool operator == (const ClientService_close_mutator_args & rhs) const
  {
    if (!(mutator == rhs.mutator))
      return false;
    if (!(flush == rhs.flush))
      return false;
    return true;
  }
  bool operator != (const ClientService_close_mutator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_close_mutator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_close_mutator_pargs {
 public:


  virtual ~ClientService_close_mutator_pargs() throw() {}

  const Mutator* mutator;
  const bool* flush;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_close_mutator_result {
 public:

  ClientService_close_mutator_result() {
  }

  virtual ~ClientService_close_mutator_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_close_mutator_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_close_mutator_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_close_mutator_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_close_mutator_presult {
 public:


  virtual ~ClientService_close_mutator_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_set_cell_args {
 public:

  ClientService_set_cell_args() : mutator(0) {
  }

  virtual ~ClientService_set_cell_args() throw() {}

  Mutator mutator;
  Cell cell;

  struct __isset {
    __isset() : mutator(false), cell(false) {}
    bool mutator;
    bool cell;
  } __isset;

  bool operator == (const ClientService_set_cell_args & rhs) const
  {
    if (!(mutator == rhs.mutator))
      return false;
    if (!(cell == rhs.cell))
      return false;
    return true;
  }
  bool operator != (const ClientService_set_cell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_set_cell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cell_pargs {
 public:


  virtual ~ClientService_set_cell_pargs() throw() {}

  const Mutator* mutator;
  const Cell* cell;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cell_result {
 public:

  ClientService_set_cell_result() {
  }

  virtual ~ClientService_set_cell_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_set_cell_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_set_cell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_set_cell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cell_presult {
 public:


  virtual ~ClientService_set_cell_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_set_cell_as_array_args {
 public:

  ClientService_set_cell_as_array_args() : mutator(0) {
  }

  virtual ~ClientService_set_cell_as_array_args() throw() {}

  Mutator mutator;
  CellAsArray cell;

  struct __isset {
    __isset() : mutator(false), cell(false) {}
    bool mutator;
    bool cell;
  } __isset;

  bool operator == (const ClientService_set_cell_as_array_args & rhs) const
  {
    if (!(mutator == rhs.mutator))
      return false;
    if (!(cell == rhs.cell))
      return false;
    return true;
  }
  bool operator != (const ClientService_set_cell_as_array_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_set_cell_as_array_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cell_as_array_pargs {
 public:


  virtual ~ClientService_set_cell_as_array_pargs() throw() {}

  const Mutator* mutator;
  const CellAsArray* cell;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cell_as_array_result {
 public:

  ClientService_set_cell_as_array_result() {
  }

  virtual ~ClientService_set_cell_as_array_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_set_cell_as_array_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_set_cell_as_array_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_set_cell_as_array_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cell_as_array_presult {
 public:


  virtual ~ClientService_set_cell_as_array_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_set_cells_args {
 public:

  ClientService_set_cells_args() : mutator(0) {
  }

  virtual ~ClientService_set_cells_args() throw() {}

  Mutator mutator;
  std::vector<Cell>  cells;

  struct __isset {
    __isset() : mutator(false), cells(false) {}
    bool mutator;
    bool cells;
  } __isset;

  bool operator == (const ClientService_set_cells_args & rhs) const
  {
    if (!(mutator == rhs.mutator))
      return false;
    if (!(cells == rhs.cells))
      return false;
    return true;
  }
  bool operator != (const ClientService_set_cells_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_set_cells_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cells_pargs {
 public:


  virtual ~ClientService_set_cells_pargs() throw() {}

  const Mutator* mutator;
  const std::vector<Cell> * cells;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cells_result {
 public:

  ClientService_set_cells_result() {
  }

  virtual ~ClientService_set_cells_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_set_cells_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_set_cells_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_set_cells_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cells_presult {
 public:


  virtual ~ClientService_set_cells_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_set_cells_as_arrays_args {
 public:

  ClientService_set_cells_as_arrays_args() : mutator(0) {
  }

  virtual ~ClientService_set_cells_as_arrays_args() throw() {}

  Mutator mutator;
  std::vector<CellAsArray>  cells;

  struct __isset {
    __isset() : mutator(false), cells(false) {}
    bool mutator;
    bool cells;
  } __isset;

  bool operator == (const ClientService_set_cells_as_arrays_args & rhs) const
  {
    if (!(mutator == rhs.mutator))
      return false;
    if (!(cells == rhs.cells))
      return false;
    return true;
  }
  bool operator != (const ClientService_set_cells_as_arrays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_set_cells_as_arrays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cells_as_arrays_pargs {
 public:


  virtual ~ClientService_set_cells_as_arrays_pargs() throw() {}

  const Mutator* mutator;
  const std::vector<CellAsArray> * cells;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cells_as_arrays_result {
 public:

  ClientService_set_cells_as_arrays_result() {
  }

  virtual ~ClientService_set_cells_as_arrays_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_set_cells_as_arrays_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_set_cells_as_arrays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_set_cells_as_arrays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_set_cells_as_arrays_presult {
 public:


  virtual ~ClientService_set_cells_as_arrays_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_flush_mutator_args {
 public:

  ClientService_flush_mutator_args() : mutator(0) {
  }

  virtual ~ClientService_flush_mutator_args() throw() {}

  Mutator mutator;

  struct __isset {
    __isset() : mutator(false) {}
    bool mutator;
  } __isset;

  bool operator == (const ClientService_flush_mutator_args & rhs) const
  {
    if (!(mutator == rhs.mutator))
      return false;
    return true;
  }
  bool operator != (const ClientService_flush_mutator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_flush_mutator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_flush_mutator_pargs {
 public:


  virtual ~ClientService_flush_mutator_pargs() throw() {}

  const Mutator* mutator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_flush_mutator_result {
 public:

  ClientService_flush_mutator_result() {
  }

  virtual ~ClientService_flush_mutator_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_flush_mutator_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_flush_mutator_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_flush_mutator_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_flush_mutator_presult {
 public:


  virtual ~ClientService_flush_mutator_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_get_table_id_args {
 public:

  ClientService_get_table_id_args() : name("") {
  }

  virtual ~ClientService_get_table_id_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  bool operator == (const ClientService_get_table_id_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_table_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_table_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_table_id_pargs {
 public:


  virtual ~ClientService_get_table_id_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_table_id_result {
 public:

  ClientService_get_table_id_result() : success(0) {
  }

  virtual ~ClientService_get_table_id_result() throw() {}

  int32_t success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_get_table_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_table_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_table_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_table_id_presult {
 public:


  virtual ~ClientService_get_table_id_presult() throw() {}

  int32_t* success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_get_schema_args {
 public:

  ClientService_get_schema_args() : name("") {
  }

  virtual ~ClientService_get_schema_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  bool operator == (const ClientService_get_schema_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_schema_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_schema_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_schema_pargs {
 public:


  virtual ~ClientService_get_schema_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_schema_result {
 public:

  ClientService_get_schema_result() : success("") {
  }

  virtual ~ClientService_get_schema_result() throw() {}

  std::string success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_get_schema_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_schema_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_schema_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_schema_presult {
 public:


  virtual ~ClientService_get_schema_presult() throw() {}

  std::string* success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_get_tables_args {
 public:

  ClientService_get_tables_args() {
  }

  virtual ~ClientService_get_tables_args() throw() {}


  bool operator == (const ClientService_get_tables_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_get_tables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_tables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_tables_pargs {
 public:


  virtual ~ClientService_get_tables_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_tables_result {
 public:

  ClientService_get_tables_result() {
  }

  virtual ~ClientService_get_tables_result() throw() {}

  std::vector<std::string>  success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const ClientService_get_tables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_get_tables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_get_tables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_get_tables_presult {
 public:


  virtual ~ClientService_get_tables_presult() throw() {}

  std::vector<std::string> * success;
  ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientService_drop_table_args {
 public:

  ClientService_drop_table_args() : name(""), if_exists(true) {
  }

  virtual ~ClientService_drop_table_args() throw() {}

  std::string name;
  bool if_exists;

  struct __isset {
    __isset() : name(false), if_exists(false) {}
    bool name;
    bool if_exists;
  } __isset;

  bool operator == (const ClientService_drop_table_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(if_exists == rhs.if_exists))
      return false;
    return true;
  }
  bool operator != (const ClientService_drop_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_drop_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_drop_table_pargs {
 public:


  virtual ~ClientService_drop_table_pargs() throw() {}

  const std::string* name;
  const bool* if_exists;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_drop_table_result {
 public:

  ClientService_drop_table_result() {
  }

  virtual ~ClientService_drop_table_result() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const ClientService_drop_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ClientService_drop_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_drop_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientService_drop_table_presult {
 public:


  virtual ~ClientService_drop_table_presult() throw() {}

  ClientException e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientServiceClient : virtual public ClientServiceIf {
 public:
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create_table(const std::string& name, const std::string& schema);
  void send_create_table(const std::string& name, const std::string& schema);
  void recv_create_table();
  Scanner open_scanner(const std::string& name, const ScanSpec& scan_spec, const bool retry_table_not_found);
  void send_open_scanner(const std::string& name, const ScanSpec& scan_spec, const bool retry_table_not_found);
  Scanner recv_open_scanner();
  void close_scanner(const Scanner scanner);
  void send_close_scanner(const Scanner scanner);
  void recv_close_scanner();
  void next_cells(std::vector<Cell> & _return, const Scanner scanner);
  void send_next_cells(const Scanner scanner);
  void recv_next_cells(std::vector<Cell> & _return);
  void next_cells_as_arrays(std::vector<CellAsArray> & _return, const Scanner scanner);
  void send_next_cells_as_arrays(const Scanner scanner);
  void recv_next_cells_as_arrays(std::vector<CellAsArray> & _return);
  void next_row(std::vector<Cell> & _return, const Scanner scanner);
  void send_next_row(const Scanner scanner);
  void recv_next_row(std::vector<Cell> & _return);
  void next_row_as_arrays(std::vector<CellAsArray> & _return, const Scanner scanner);
  void send_next_row_as_arrays(const Scanner scanner);
  void recv_next_row_as_arrays(std::vector<CellAsArray> & _return);
  void get_row(std::vector<Cell> & _return, const std::string& name, const std::string& row);
  void send_get_row(const std::string& name, const std::string& row);
  void recv_get_row(std::vector<Cell> & _return);
  void get_row_as_arrays(std::vector<CellAsArray> & _return, const std::string& name, const std::string& row);
  void send_get_row_as_arrays(const std::string& name, const std::string& row);
  void recv_get_row_as_arrays(std::vector<CellAsArray> & _return);
  void get_cell(Value& _return, const std::string& name, const std::string& row, const std::string& column);
  void send_get_cell(const std::string& name, const std::string& row, const std::string& column);
  void recv_get_cell(Value& _return);
  void get_cells(std::vector<Cell> & _return, const std::string& name, const ScanSpec& scan_spec);
  void send_get_cells(const std::string& name, const ScanSpec& scan_spec);
  void recv_get_cells(std::vector<Cell> & _return);
  void get_cells_as_arrays(std::vector<CellAsArray> & _return, const std::string& name, const ScanSpec& scan_spec);
  void send_get_cells_as_arrays(const std::string& name, const ScanSpec& scan_spec);
  void recv_get_cells_as_arrays(std::vector<CellAsArray> & _return);
  void put_cells(const std::string& tablename, const MutateSpec& mutate_spec, const std::vector<Cell> & cells);
  void send_put_cells(const std::string& tablename, const MutateSpec& mutate_spec, const std::vector<Cell> & cells);
  void recv_put_cells();
  void put_cells_as_arrays(const std::string& tablename, const MutateSpec& mutate_spec, const std::vector<CellAsArray> & cells);
  void send_put_cells_as_arrays(const std::string& tablename, const MutateSpec& mutate_spec, const std::vector<CellAsArray> & cells);
  void recv_put_cells_as_arrays();
  void put_cell(const std::string& tablename, const MutateSpec& mutate_spec, const Cell& cell);
  void send_put_cell(const std::string& tablename, const MutateSpec& mutate_spec, const Cell& cell);
  void recv_put_cell();
  void put_cell_as_array(const std::string& tablename, const MutateSpec& mutate_spec, const CellAsArray& cell);
  void send_put_cell_as_array(const std::string& tablename, const MutateSpec& mutate_spec, const CellAsArray& cell);
  void recv_put_cell_as_array();
  Mutator open_mutator(const std::string& name, const int32_t flags, const int32_t flush_interval);
  void send_open_mutator(const std::string& name, const int32_t flags, const int32_t flush_interval);
  Mutator recv_open_mutator();
  void close_mutator(const Mutator mutator, const bool flush);
  void send_close_mutator(const Mutator mutator, const bool flush);
  void recv_close_mutator();
  void set_cell(const Mutator mutator, const Cell& cell);
  void send_set_cell(const Mutator mutator, const Cell& cell);
  void recv_set_cell();
  void set_cell_as_array(const Mutator mutator, const CellAsArray& cell);
  void send_set_cell_as_array(const Mutator mutator, const CellAsArray& cell);
  void recv_set_cell_as_array();
  void set_cells(const Mutator mutator, const std::vector<Cell> & cells);
  void send_set_cells(const Mutator mutator, const std::vector<Cell> & cells);
  void recv_set_cells();
  void set_cells_as_arrays(const Mutator mutator, const std::vector<CellAsArray> & cells);
  void send_set_cells_as_arrays(const Mutator mutator, const std::vector<CellAsArray> & cells);
  void recv_set_cells_as_arrays();
  void flush_mutator(const Mutator mutator);
  void send_flush_mutator(const Mutator mutator);
  void recv_flush_mutator();
  int32_t get_table_id(const std::string& name);
  void send_get_table_id(const std::string& name);
  int32_t recv_get_table_id();
  void get_schema(std::string& _return, const std::string& name);
  void send_get_schema(const std::string& name);
  void recv_get_schema(std::string& _return);
  void get_tables(std::vector<std::string> & _return);
  void send_get_tables();
  void recv_get_tables(std::vector<std::string> & _return);
  void drop_table(const std::string& name, const bool if_exists);
  void send_drop_table(const std::string& name, const bool if_exists);
  void recv_drop_table();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (ClientServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_open_scanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_close_scanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_next_cells(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_next_cells_as_arrays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_next_row(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_next_row_as_arrays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get_row(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get_row_as_arrays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get_cell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get_cells(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get_cells_as_arrays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_put_cells(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_put_cells_as_arrays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_put_cell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_put_cell_as_array(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_open_mutator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_close_mutator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_set_cell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_set_cell_as_array(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_set_cells(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_set_cells_as_arrays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_flush_mutator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get_table_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get_schema(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_drop_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  ClientServiceProcessor(boost::shared_ptr<ClientServiceIf> iface) :
    iface_(iface) {
    processMap_["create_table"] = &ClientServiceProcessor::process_create_table;
    processMap_["open_scanner"] = &ClientServiceProcessor::process_open_scanner;
    processMap_["close_scanner"] = &ClientServiceProcessor::process_close_scanner;
    processMap_["next_cells"] = &ClientServiceProcessor::process_next_cells;
    processMap_["next_cells_as_arrays"] = &ClientServiceProcessor::process_next_cells_as_arrays;
    processMap_["next_row"] = &ClientServiceProcessor::process_next_row;
    processMap_["next_row_as_arrays"] = &ClientServiceProcessor::process_next_row_as_arrays;
    processMap_["get_row"] = &ClientServiceProcessor::process_get_row;
    processMap_["get_row_as_arrays"] = &ClientServiceProcessor::process_get_row_as_arrays;
    processMap_["get_cell"] = &ClientServiceProcessor::process_get_cell;
    processMap_["get_cells"] = &ClientServiceProcessor::process_get_cells;
    processMap_["get_cells_as_arrays"] = &ClientServiceProcessor::process_get_cells_as_arrays;
    processMap_["put_cells"] = &ClientServiceProcessor::process_put_cells;
    processMap_["put_cells_as_arrays"] = &ClientServiceProcessor::process_put_cells_as_arrays;
    processMap_["put_cell"] = &ClientServiceProcessor::process_put_cell;
    processMap_["put_cell_as_array"] = &ClientServiceProcessor::process_put_cell_as_array;
    processMap_["open_mutator"] = &ClientServiceProcessor::process_open_mutator;
    processMap_["close_mutator"] = &ClientServiceProcessor::process_close_mutator;
    processMap_["set_cell"] = &ClientServiceProcessor::process_set_cell;
    processMap_["set_cell_as_array"] = &ClientServiceProcessor::process_set_cell_as_array;
    processMap_["set_cells"] = &ClientServiceProcessor::process_set_cells;
    processMap_["set_cells_as_arrays"] = &ClientServiceProcessor::process_set_cells_as_arrays;
    processMap_["flush_mutator"] = &ClientServiceProcessor::process_flush_mutator;
    processMap_["get_table_id"] = &ClientServiceProcessor::process_get_table_id;
    processMap_["get_schema"] = &ClientServiceProcessor::process_get_schema;
    processMap_["get_tables"] = &ClientServiceProcessor::process_get_tables;
    processMap_["drop_table"] = &ClientServiceProcessor::process_drop_table;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~ClientServiceProcessor() {}
};

class ClientServiceMultiface : virtual public ClientServiceIf {
 public:
  ClientServiceMultiface(std::vector<boost::shared_ptr<ClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientServiceIf> > ifaces_;
  ClientServiceMultiface() {}
  void add(boost::shared_ptr<ClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void create_table(const std::string& name, const std::string& schema) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->create_table(name, schema);
    }
  }

  Scanner open_scanner(const std::string& name, const ScanSpec& scan_spec, const bool retry_table_not_found) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->open_scanner(name, scan_spec, retry_table_not_found);
      } else {
        ifaces_[i]->open_scanner(name, scan_spec, retry_table_not_found);
      }
    }
  }

  void close_scanner(const Scanner scanner) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->close_scanner(scanner);
    }
  }

  void next_cells(std::vector<Cell> & _return, const Scanner scanner) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->next_cells(_return, scanner);
        return;
      } else {
        ifaces_[i]->next_cells(_return, scanner);
      }
    }
  }

  void next_cells_as_arrays(std::vector<CellAsArray> & _return, const Scanner scanner) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->next_cells_as_arrays(_return, scanner);
        return;
      } else {
        ifaces_[i]->next_cells_as_arrays(_return, scanner);
      }
    }
  }

  void next_row(std::vector<Cell> & _return, const Scanner scanner) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->next_row(_return, scanner);
        return;
      } else {
        ifaces_[i]->next_row(_return, scanner);
      }
    }
  }

  void next_row_as_arrays(std::vector<CellAsArray> & _return, const Scanner scanner) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->next_row_as_arrays(_return, scanner);
        return;
      } else {
        ifaces_[i]->next_row_as_arrays(_return, scanner);
      }
    }
  }

  void get_row(std::vector<Cell> & _return, const std::string& name, const std::string& row) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_row(_return, name, row);
        return;
      } else {
        ifaces_[i]->get_row(_return, name, row);
      }
    }
  }

  void get_row_as_arrays(std::vector<CellAsArray> & _return, const std::string& name, const std::string& row) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_row_as_arrays(_return, name, row);
        return;
      } else {
        ifaces_[i]->get_row_as_arrays(_return, name, row);
      }
    }
  }

  void get_cell(Value& _return, const std::string& name, const std::string& row, const std::string& column) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_cell(_return, name, row, column);
        return;
      } else {
        ifaces_[i]->get_cell(_return, name, row, column);
      }
    }
  }

  void get_cells(std::vector<Cell> & _return, const std::string& name, const ScanSpec& scan_spec) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_cells(_return, name, scan_spec);
        return;
      } else {
        ifaces_[i]->get_cells(_return, name, scan_spec);
      }
    }
  }

  void get_cells_as_arrays(std::vector<CellAsArray> & _return, const std::string& name, const ScanSpec& scan_spec) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_cells_as_arrays(_return, name, scan_spec);
        return;
      } else {
        ifaces_[i]->get_cells_as_arrays(_return, name, scan_spec);
      }
    }
  }

  void put_cells(const std::string& tablename, const MutateSpec& mutate_spec, const std::vector<Cell> & cells) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->put_cells(tablename, mutate_spec, cells);
    }
  }

  void put_cells_as_arrays(const std::string& tablename, const MutateSpec& mutate_spec, const std::vector<CellAsArray> & cells) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->put_cells_as_arrays(tablename, mutate_spec, cells);
    }
  }

  void put_cell(const std::string& tablename, const MutateSpec& mutate_spec, const Cell& cell) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->put_cell(tablename, mutate_spec, cell);
    }
  }

  void put_cell_as_array(const std::string& tablename, const MutateSpec& mutate_spec, const CellAsArray& cell) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->put_cell_as_array(tablename, mutate_spec, cell);
    }
  }

  Mutator open_mutator(const std::string& name, const int32_t flags, const int32_t flush_interval) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->open_mutator(name, flags, flush_interval);
      } else {
        ifaces_[i]->open_mutator(name, flags, flush_interval);
      }
    }
  }

  void close_mutator(const Mutator mutator, const bool flush) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->close_mutator(mutator, flush);
    }
  }

  void set_cell(const Mutator mutator, const Cell& cell) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->set_cell(mutator, cell);
    }
  }

  void set_cell_as_array(const Mutator mutator, const CellAsArray& cell) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->set_cell_as_array(mutator, cell);
    }
  }

  void set_cells(const Mutator mutator, const std::vector<Cell> & cells) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->set_cells(mutator, cells);
    }
  }

  void set_cells_as_arrays(const Mutator mutator, const std::vector<CellAsArray> & cells) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->set_cells_as_arrays(mutator, cells);
    }
  }

  void flush_mutator(const Mutator mutator) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->flush_mutator(mutator);
    }
  }

  int32_t get_table_id(const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->get_table_id(name);
      } else {
        ifaces_[i]->get_table_id(name);
      }
    }
  }

  void get_schema(std::string& _return, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_schema(_return, name);
        return;
      } else {
        ifaces_[i]->get_schema(_return, name);
      }
    }
  }

  void get_tables(std::vector<std::string> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_tables(_return);
        return;
      } else {
        ifaces_[i]->get_tables(_return);
      }
    }
  }

  void drop_table(const std::string& name, const bool if_exists) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->drop_table(name, if_exists);
    }
  }

};

}} // namespace

#endif
